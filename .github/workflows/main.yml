# This is a basic workflow to help you get started with Actions

name: CI - Continue Integration ( Build, Test automate )

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          VERSION=$(echo ${{ github.event.head_commit.timestamp }} | cut -c1-16)
          echo ${VERSION,,}
          export VERSION=${VERSION,,}
          echo "::set-output name=version::${VERSION,,}"

      - name: Build and push
        uses: docker/build-push-action@v3

        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ steps.get_version.outputs.version }}
  deploy:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    needs: docker
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(echo ${{ github.event.head_commit.timestamp }} | cut -c1-16)
          echo ${VERSION,,}
          export VERSION=${VERSION,,}
          echo "::set-output name=version::${VERSION,,}"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Command doctl
        run: |
          doctl registry login
          docker build -t abc .
          docker tag abc registry.digitalocean.com/demoregistry/abc
          docker push registry.digitalocean.com/demoregistry/abc



